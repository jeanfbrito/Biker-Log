name: Auto Release

on:
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      discussions: write
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Get version
        id: version
        run: |
          # Get the last tag (or use v0.0.0 if no tags exist)
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          VERSION=${LAST_TAG#v}
          
          # Split version into major.minor.patch
          IFS='.' read -ra PARTS <<< "$VERSION"
          MAJOR=${PARTS[0]:-0}
          MINOR=${PARTS[1]:-0}
          PATCH=${PARTS[2]:-0}
          
          # Increment patch version
          PATCH=$((PATCH + 1))
          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          
          echo "Last tag: $LAST_TAG"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Update version in build.gradle
        run: |
          # Update versionName
          sed -i "s/versionName \"[^\"]*\"/versionName \"${{ steps.version.outputs.version }}\"/" app/build.gradle.kts
          
          # Calculate and update versionCode (use patch number + 1 as base)
          PATCH=$(echo "${{ steps.version.outputs.version }}" | cut -d. -f3)
          VERSION_CODE=$((PATCH + 1))
          sed -i "s/versionCode = [0-9]*/versionCode = $VERSION_CODE/" app/build.gradle.kts
      
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      
      - name: Build debug APK
        run: ./gradlew assembleDebug
      
      - name: Get commit messages
        id: commits
        run: |
          # Get commit messages since last tag
          if [ "${{ steps.version.outputs.tag }}" = "v0.0.1" ]; then
            # First release - get last 10 commits
            git log --oneline -10 --pretty="- %s" > commits.txt
          else
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              git log ${LAST_TAG}..HEAD --oneline --pretty="- %s" > commits.txt
            else
              git log --oneline -10 --pretty="- %s" > commits.txt
            fi
          fi
          
          # Clean up and format commits
          if [ ! -s commits.txt ]; then
            echo "No new commits since last release." > commits.txt
          fi
      
      - name: Create release notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 Development Build
          
          **Version:** ${{ steps.version.outputs.version }}
          **Build Date:** ${{ github.event.head_commit.timestamp }}
          **Commit:** ${{ github.sha }}
          
          ### 📝 Changes in this build:
          EOF
          cat commits.txt >> release_notes.md
          cat >> release_notes.md << 'EOF'
          
          ### 📱 Installation:
          1. Download the APK file below
          2. Enable "Install from unknown sources" in your Android settings
          3. Open the downloaded APK to install
          
          ### ⚠️ Note:
          This is a development build. For production use, please wait for official releases.
          EOF
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Dev Build ${{ steps.version.outputs.tag }}
          body_path: release_notes.md
          files: app/build/outputs/apk/debug/app-debug.apk
          draft: false
          prerelease: false
          generate_release_notes: false
