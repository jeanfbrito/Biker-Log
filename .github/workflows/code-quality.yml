name: Code Quality

on:
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
    # Run weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  ktlint:
    name: Kotlin Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        cache: gradle
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Check if ktlint is configured
      id: check_ktlint
      run: |
        if grep -q "ktlint" build.gradle.kts || grep -q "ktlint" app/build.gradle.kts; then
          echo "configured=true" >> $GITHUB_OUTPUT
        else
          echo "configured=false" >> $GITHUB_OUTPUT
          echo "::warning::Ktlint is not configured. Skipping ktlint checks."
        fi
    
    - name: Run ktlint
      if: steps.check_ktlint.outputs.configured == 'true'
      run: ./gradlew ktlintCheck --continue || true
      continue-on-error: true
    
    - name: Upload ktlint reports
      if: steps.check_ktlint.outputs.configured == 'true' && always()
      uses: actions/upload-artifact@v4
      with:
        name: ktlint-report
        path: '**/build/reports/ktlint/**/*.html'
        retention-days: 7

  detekt:
    name: Detekt Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        cache: gradle
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Check if detekt is configured
      id: check_detekt
      run: |
        if grep -q "detekt" build.gradle.kts || grep -q "detekt" app/build.gradle.kts; then
          echo "configured=true" >> $GITHUB_OUTPUT
        else
          echo "configured=false" >> $GITHUB_OUTPUT
          echo "::warning::Detekt is not configured. Skipping detekt analysis."
        fi
    
    - name: Run detekt
      if: steps.check_detekt.outputs.configured == 'true'
      run: ./gradlew detekt --continue || true
      continue-on-error: true
    
    - name: Upload detekt reports
      if: steps.check_detekt.outputs.configured == 'true' && always()
      uses: actions/upload-artifact@v4
      with:
        name: detekt-report
        path: '**/build/reports/detekt/*.html'
        retention-days: 7

  dependency-analysis:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        cache: gradle
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Check for outdated dependencies
      run: |
        ./gradlew dependencyUpdates -Drevision=release --refresh-dependencies || true
      continue-on-error: true
    
    - name: Generate dependency report
      run: |
        echo "## Dependency Report" > dependency-report.md
        echo "" >> dependency-report.md
        
        # Extract current versions from gradle files
        echo "### Current Dependencies" >> dependency-report.md
        echo '```' >> dependency-report.md
        grep -h "implementation\|api\|testImplementation" app/build.gradle.kts | head -20 >> dependency-report.md
        echo '```' >> dependency-report.md
        
        cat dependency-report.md
    
    - name: Upload dependency reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-report
        path: |
          build/dependencyUpdates/report.txt
          dependency-report.md
        retention-days: 7

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        cache: gradle
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Run tests with coverage
      run: |
        ./gradlew testDebugUnitTest || true
        ./gradlew jacocoTestReport || true
      continue-on-error: true
    
    - name: Generate coverage summary
      run: |
        echo "## Coverage Summary" > coverage-summary.md
        echo "" >> coverage-summary.md
        
        # Count test files and methods
        TEST_FILES=$(find app/src/test -name "*.kt" -o -name "*.java" | wc -l)
        TEST_METHODS=$(grep -r "@Test" app/src/test | wc -l)
        
        echo "- Test files: $TEST_FILES" >> coverage-summary.md
        echo "- Test methods: $TEST_METHODS" >> coverage-summary.md
        echo "" >> coverage-summary.md
        
        # List test classes
        echo "### Test Classes" >> coverage-summary.md
        echo '```' >> coverage-summary.md
        find app/src/test -name "*Test.kt" -o -name "*Test.java" | xargs basename -a | head -20 >> coverage-summary.md
        echo '```' >> coverage-summary.md
        
        cat coverage-summary.md
    
    - name: Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          app/build/reports/jacoco/
          coverage-summary.md
        retention-days: 7
    
    - name: Comment PR with coverage
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          let coverageSummary = 'Coverage report not available';
          
          try {
            if (fs.existsSync('coverage-summary.md')) {
              coverageSummary = fs.readFileSync('coverage-summary.md', 'utf8');
            }
          } catch (error) {
            console.log('Could not read coverage summary:', error);
          }
          
          const comment = `## ðŸ“Š Code Quality Report
          
          ${coverageSummary}
          
          ### Quality Checks
          - âœ… Ktlint: Check artifacts for detailed report
          - âœ… Detekt: Check artifacts for detailed report
          - âœ… Dependencies: Check artifacts for outdated dependencies
          
          ---
          <sub>ðŸ’¡ Add ktlint and detekt to your build.gradle.kts for automated code quality checks</sub>`;
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('## ðŸ“Š Code Quality Report')
          );
          
          // Update or create comment
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment,
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment,
            });
          }